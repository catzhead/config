"let mapleader = ','

call plug#begin(stdpath('data') . '/plugged')

" Navigation
Plug 'https://github.com/scrooloose/nerdtree.git'
Plug 'wincent/command-t'
Plug 'mileszs/ack.vim'

" Misc
Plug 'https://github.com/xolox/vim-misc.git'

" Completion/PEP-8
Plug 'nvie/vim-flake8'

" Python
Plug 'https://github.com/plytophogy/vim-virtualenv'

" LSP client
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"Plug 'autozimu/LanguageClient-neovim', {
  "\ 'branch': 'next',
  "\ 'do': 'bash install.sh',
  "\ }


call plug#end()


" Basic stuff
  set nocompatible
  filetype plugin on
  set encoding=utf-8
  syntax on
  set hidden
  set wildmenu
  set ruler
  set vb t_vb=
  set number
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set expandtab
  set history=200
  set guicursor+=a:blinkon0
  set noswapfile
  set cc=80
  set cursorline

" Style
  if has("gui_running")
    set t_Co=256
    "colorscheme soft-stone
    set background=light
    colorscheme catz2
    set termguicolors
    set guifont=Inconsolata\ 12
    set guioptions+=lrbmTLce
    set guioptions-=lrbmTLce
    set guioptions+=c
  else
    set t_Co=256
    INSERT_COLORS
    set termguicolors
  endif

" Highlight search and use C-l to disable highlighting until the next search
  set hlsearch
  nnoremap <CR> :nohlsearch<CR>
"  nnoremap <leader>l :noh<CR><C-l>

" Open new split in the correct direction
  set splitbelow splitright

" Force N lines when reaching the top or the bottom of the screen
  set so=7

" Navigation without C-w first
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l

" Disable comment on newline
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Enable autocompletion:
  set wildmode=longest,list,full

" Automatically deletes all trailing whitespace on save.
	autocmd BufWritePre * %s/\s\+$//e

" Remap clipboard copy-paste keys
  vnoremap <leader>y "+y
  vnoremap <leader>d "+d
  nnoremap <leader>p "+p

" Experimental stuff

" Nerd tree
	map <leader>N :NERDTreeToggle<CR>
	map <leader>n :NERDTreeFocus<CR>
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") &&
    \ b:NERDTree.isTabTree()) | q | endif

" When there is no filetype-specific indenting enabled,
" keep the same indent as the current line
"  set autoindent

" Disable the autoindent
  filetype indent off

" Python
  let g:python_highlight_space_errors = 0
  autocmd BufWritePost *.py call Flake8()
  let g:flake8_show_in_gutter=1
  autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4

" Quickfix shortcuts
  nnoremap <F11> :cprev <CR>
  nnoremap <F12> :cnext <CR>

" LanguageClient config
  "let g:LanguageClient_serverCommands = {
  "\ 'cpp': ['clangd'],
  "\ 'go': ['gopls']
  "\ }
  "let g:LanguageClient_hideVirtualTextsOnInsert = 1

" CoC configuration
  set hidden
  set updatetime=300
  set shortmess+=c
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " Make <CR> auto-select the first completion item and notify coc.nvim to
  " format on enter, <cr> could be remapped by other vim plugin
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                             \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  " Remap <C-f> and <C-b> for scroll float windows/popups.
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif
